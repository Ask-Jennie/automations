{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Pipe, InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Input, Output, SecurityContext, NgModule } from '@angular/core';\nimport { Subject, merge, of, timer } from 'rxjs';\nimport { switchMap, mapTo, distinctUntilChanged, shareReplay, startWith, map, takeUntil, first } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { Renderer, marked } from 'marked';\nexport { Renderer as MarkedRenderer } from 'marked';\nimport * as i1$1 from '@angular/common/http';\nimport * as i4 from '@angular/platform-browser';\nconst _c0 = [\"*\"];\nconst BUTTON_TEXT_COPY = 'Copy';\nconst BUTTON_TEXT_COPIED = 'Copied';\n\nclass ClipboardButtonComponent {\n  constructor() {\n    this._buttonClick$ = new Subject();\n    this.copied$ = this._buttonClick$.pipe(switchMap(() => merge(of(true), timer(3000).pipe(mapTo(false)))), distinctUntilChanged(), shareReplay(1));\n    this.copiedText$ = this.copied$.pipe(startWith(false), map(copied => copied ? BUTTON_TEXT_COPIED : BUTTON_TEXT_COPY));\n  }\n\n  onCopyToClipboardClick() {\n    this._buttonClick$.next();\n  }\n\n}\n\nClipboardButtonComponent.ɵfac = function ClipboardButtonComponent_Factory(t) {\n  return new (t || ClipboardButtonComponent)();\n};\n\nClipboardButtonComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ClipboardButtonComponent,\n  selectors: [[\"markdown-clipboard\"]],\n  decls: 4,\n  vars: 7,\n  consts: [[1, \"markdown-clipboard-button\", 3, \"click\"]],\n  template: function ClipboardButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function ClipboardButtonComponent_Template_button_click_0_listener() {\n        return ctx.onCopyToClipboardClick();\n      });\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵtext(2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"copied\", i0.ɵɵpipeBind1(1, 3, ctx.copied$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 5, ctx.copiedText$));\n    }\n  },\n  dependencies: [i1.AsyncPipe],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardButtonComponent, [{\n    type: Component,\n    args: [{\n      selector: 'markdown-clipboard',\n      template: `\n    <button\n      class=\"markdown-clipboard-button\"\n      [class.copied]=\"copied$ | async\"\n      (click)=\"onCopyToClipboardClick()\"\n    >{{ copiedText$ | async }}</button>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, null);\n})();\n\nclass ClipboardOptions {}\n\nclass ClipboardRenderOptions extends ClipboardOptions {}\n/* eslint-disable */\n\n\nclass KatexSpecificOptions {}\n\nclass LanguagePipe {\n  transform(value, language) {\n    if (value == null) {\n      value = '';\n    }\n\n    if (language == null) {\n      language = '';\n    }\n\n    if (typeof value !== 'string') {\n      console.error(`LanguagePipe has been invoked with an invalid value type [${typeof value}]`);\n      return value;\n    }\n\n    if (typeof language !== 'string') {\n      console.error(`LanguagePipe has been invoked with an invalid parameter [${typeof language}]`);\n      return value;\n    }\n\n    return '```' + language + '\\n' + value + '\\n```';\n  }\n\n}\n\nLanguagePipe.ɵfac = function LanguagePipe_Factory(t) {\n  return new (t || LanguagePipe)();\n};\n\nLanguagePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"language\",\n  type: LanguagePipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LanguagePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'language'\n    }]\n  }], null, null);\n})();\n\nvar PrismPlugin;\n\n(function (PrismPlugin) {\n  PrismPlugin[\"CommandLine\"] = \"command-line\";\n  PrismPlugin[\"LineHighlight\"] = \"line-highlight\";\n  PrismPlugin[\"LineNumbers\"] = \"line-numbers\";\n})(PrismPlugin || (PrismPlugin = {}));\n\nclass MarkedOptions {}\n/* eslint-disable max-len */\n\n\nconst errorJoyPixelsNotLoaded = '[ngx-markdown] When using the `emoji` attribute you *have to* include Emoji-Toolkit files to `angular.json` or use imports. See README for more information';\nconst errorKatexNotLoaded = '[ngx-markdown] When using the `katex` attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information';\nconst errorMermaidNotLoaded = '[ngx-markdown] When using the `mermaid` attribute you *have to* include Mermaid files to `angular.json` or use imports. See README for more information';\nconst errorClipboardNotLoaded = '[ngx-markdown] When using the `clipboard` attribute you *have to* include Clipboard files to `angular.json` or use imports. See README for more information';\nconst errorClipboardViewContainerRequired = '[ngx-markdown] When using the `clipboard` attribute you *have to* provide the `viewContainerRef` parameter to `MarkdownService.render()` function';\nconst errorSrcWithoutHttpClient = '[ngx-markdown] When using the `src` attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';\n/* eslint-enable max-len */\n\nconst SECURITY_CONTEXT = new InjectionToken('SECURITY_CONTEXT');\n\nclass ExtendedRenderer extends Renderer {\n  constructor() {\n    super(...arguments);\n    this.ɵNgxMarkdownRendererExtended = false;\n  }\n\n}\n\nclass MarkdownService {\n  constructor(platform, securityContext, http, clipboardOptions, options, sanitizer) {\n    this.platform = platform;\n    this.securityContext = securityContext;\n    this.http = http;\n    this.clipboardOptions = clipboardOptions;\n    this.sanitizer = sanitizer;\n    this.DEFAULT_PARSE_OPTIONS = {\n      decodeHtml: false,\n      inline: false,\n      emoji: false,\n      mermaid: false,\n      markedOptions: undefined\n    };\n    this.DEFAULT_RENDER_OPTIONS = {\n      clipboard: false,\n      clipboardOptions: undefined,\n      katex: false,\n      katexOptions: undefined,\n      mermaid: false,\n      mermaidOptions: undefined\n    };\n    this.DEFAULT_MARKED_OPTIONS = {\n      renderer: new Renderer()\n    };\n    this.DEFAULT_KATEX_OPTIONS = {\n      delimiters: [{\n        left: \"$$\",\n        right: \"$$\",\n        display: true\n      }, {\n        left: \"$\",\n        right: \"$\",\n        display: false\n      }, {\n        left: \"\\\\(\",\n        right: \"\\\\)\",\n        display: false\n      }, {\n        left: \"\\\\begin{equation}\",\n        right: \"\\\\end{equation}\",\n        display: true\n      }, {\n        left: \"\\\\begin{align}\",\n        right: \"\\\\end{align}\",\n        display: true\n      }, {\n        left: \"\\\\begin{alignat}\",\n        right: \"\\\\end{alignat}\",\n        display: true\n      }, {\n        left: \"\\\\begin{gather}\",\n        right: \"\\\\end{gather}\",\n        display: true\n      }, {\n        left: \"\\\\begin{CD}\",\n        right: \"\\\\end{CD}\",\n        display: true\n      }, {\n        left: \"\\\\[\",\n        right: \"\\\\]\",\n        display: true\n      }]\n    };\n    this.DEFAULT_MERMAID_OPTIONS = {\n      startOnLoad: false\n    };\n    this.DEFAULT_CLIPBOARD_OPTIONS = {\n      buttonComponent: undefined\n    };\n    this._reload$ = new Subject();\n    this.reload$ = this._reload$.asObservable();\n    this.options = options;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(value) {\n    this._options = { ...this.DEFAULT_MARKED_OPTIONS,\n      ...value\n    };\n  }\n\n  get renderer() {\n    return this.options.renderer;\n  }\n\n  set renderer(value) {\n    this.options.renderer = value;\n  }\n\n  parse(markdown, options = this.DEFAULT_PARSE_OPTIONS) {\n    const {\n      decodeHtml,\n      inline,\n      emoji,\n      mermaid,\n      markedOptions = this.options\n    } = options;\n\n    if (mermaid) {\n      this.renderer = this.extendRenderer(markedOptions.renderer || new Renderer());\n    }\n\n    const trimmed = this.trimIndentation(markdown);\n    const decoded = decodeHtml ? this.decodeHtml(trimmed) : trimmed;\n    const emojified = emoji ? this.parseEmoji(decoded) : decoded;\n    const marked = this.parseMarked(emojified, markedOptions, inline);\n    return this.sanitizer.sanitize(this.securityContext, marked) || '';\n  }\n\n  render(element, options = this.DEFAULT_RENDER_OPTIONS, viewContainerRef) {\n    const {\n      clipboard,\n      clipboardOptions,\n      katex,\n      katexOptions,\n      mermaid,\n      mermaidOptions\n    } = options;\n\n    if (clipboard) {\n      this.renderClipboard(element, viewContainerRef, { ...this.DEFAULT_CLIPBOARD_OPTIONS,\n        ...this.clipboardOptions,\n        ...clipboardOptions\n      });\n    }\n\n    if (katex) {\n      this.renderKatex(element, { ...this.DEFAULT_KATEX_OPTIONS,\n        ...katexOptions\n      });\n    }\n\n    if (mermaid) {\n      this.renderMermaid(element, { ...this.DEFAULT_MERMAID_OPTIONS,\n        ...mermaidOptions\n      });\n    }\n\n    this.highlight(element);\n  }\n\n  reload() {\n    this._reload$.next();\n  }\n\n  getSource(src) {\n    if (!this.http) {\n      throw new Error(errorSrcWithoutHttpClient);\n    }\n\n    return this.http.get(src, {\n      responseType: 'text'\n    }).pipe(map(markdown => this.handleExtension(src, markdown)));\n  }\n\n  highlight(element) {\n    if (!isPlatformBrowser(this.platform)) {\n      return;\n    }\n\n    if (typeof Prism === 'undefined' || typeof Prism.highlightAllUnder === 'undefined') {\n      return;\n    }\n\n    if (!element) {\n      element = document;\n    }\n\n    const noLanguageElements = element.querySelectorAll('pre code:not([class*=\"language-\"])');\n    Array.prototype.forEach.call(noLanguageElements, x => x.classList.add('language-none'));\n    Prism.highlightAllUnder(element);\n  }\n\n  decodeHtml(html) {\n    if (!isPlatformBrowser(this.platform)) {\n      return html;\n    }\n\n    const textarea = document.createElement('textarea');\n    textarea.innerHTML = html;\n    return textarea.value;\n  }\n\n  extendRenderer(renderer) {\n    const extendedRenderer = renderer;\n\n    if (extendedRenderer.ɵNgxMarkdownRendererExtended === true) {\n      return renderer;\n    } // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    const defaultCode = renderer.code;\n\n    renderer.code = function (code, language, isEscaped) {\n      return language === 'mermaid' ? `<div class=\"mermaid\">${code}</div>` : defaultCode.call(this, code, language, isEscaped);\n    };\n\n    extendedRenderer.ɵNgxMarkdownRendererExtended = true;\n    return renderer;\n  }\n\n  handleExtension(src, markdown) {\n    const urlProtocolIndex = src.lastIndexOf('://');\n    const urlWithoutProtocol = urlProtocolIndex > -1 ? src.substring(urlProtocolIndex + 4) : src;\n    const lastSlashIndex = urlWithoutProtocol.lastIndexOf('/');\n    const lastUrlSegment = lastSlashIndex > -1 ? urlWithoutProtocol.substring(lastSlashIndex + 1).split('?')[0] : '';\n    const lastDotIndex = lastUrlSegment.lastIndexOf('.');\n    const extension = lastDotIndex > -1 ? lastUrlSegment.substring(lastDotIndex + 1) : '';\n    return !!extension && extension !== 'md' ? '```' + extension + '\\n' + markdown + '\\n```' : markdown;\n  }\n\n  parseMarked(html, markedOptions, inline = false) {\n    if (!isPlatformBrowser(this.platform)) {\n      return html;\n    }\n\n    if (inline) {\n      return marked.parseInline(html, markedOptions);\n    }\n\n    return marked.parse(html, markedOptions);\n  }\n\n  parseEmoji(html) {\n    if (!isPlatformBrowser(this.platform)) {\n      return html;\n    }\n\n    if (typeof joypixels === 'undefined' || typeof joypixels.shortnameToUnicode === 'undefined') {\n      throw new Error(errorJoyPixelsNotLoaded);\n    }\n\n    return joypixels.shortnameToUnicode(html);\n  }\n\n  renderKatex(element, options) {\n    if (!isPlatformBrowser(this.platform)) {\n      return;\n    }\n\n    if (typeof katex === 'undefined' || typeof renderMathInElement === 'undefined') {\n      throw new Error(errorKatexNotLoaded);\n    }\n\n    renderMathInElement(element, options);\n  }\n\n  renderClipboard(element, viewContainerRef, options) {\n    if (!isPlatformBrowser(this.platform)) {\n      return;\n    }\n\n    if (typeof ClipboardJS === 'undefined') {\n      throw new Error(errorClipboardNotLoaded);\n    }\n\n    if (!viewContainerRef) {\n      throw new Error(errorClipboardViewContainerRequired);\n    }\n\n    const {\n      buttonComponent,\n      buttonTemplate\n    } = options; // target every <pre> elements\n\n    const preElements = element.querySelectorAll('pre');\n\n    for (let i = 0; i < preElements.length; i++) {\n      const preElement = preElements.item(i); // create <pre> wrapper element\n\n      const preWrapperElement = document.createElement('div');\n      preWrapperElement.style.position = 'relative';\n      preElement.parentNode.insertBefore(preWrapperElement, preElement);\n      preWrapperElement.appendChild(preElement); // create toolbar element\n\n      const toolbarWrapperElement = document.createElement('div');\n      toolbarWrapperElement.style.position = 'absolute';\n      toolbarWrapperElement.style.top = '.5em';\n      toolbarWrapperElement.style.right = '.5em';\n      toolbarWrapperElement.style.opacity = '0';\n      toolbarWrapperElement.style.transition = 'opacity 250ms ease-out';\n      preWrapperElement.insertAdjacentElement('beforeend', toolbarWrapperElement); // register listener to show/hide toolbar\n\n      preElement.onmouseover = () => toolbarWrapperElement.style.opacity = '1';\n\n      preElement.onmouseout = () => toolbarWrapperElement.style.opacity = '0'; // declare embeddedViewRef holding variable\n\n\n      let embeddedViewRef; // use provided component via input property\n      // or provided via ClipboardOptions provider\n\n      if (buttonComponent) {\n        const componentRef = viewContainerRef.createComponent(buttonComponent);\n        embeddedViewRef = componentRef.hostView;\n      } // use provided template via input property\n      else if (buttonTemplate) {\n        embeddedViewRef = viewContainerRef.createEmbeddedView(buttonTemplate);\n      } // use default component\n      else {\n        const componentRef = viewContainerRef.createComponent(ClipboardButtonComponent);\n        embeddedViewRef = componentRef.hostView;\n      } // declare clipboard instance variable\n\n\n      let clipboardInstance; // attach clipboard.js to root node\n\n      embeddedViewRef.rootNodes.forEach(node => {\n        node.onmouseover = () => toolbarWrapperElement.style.opacity = '1';\n\n        toolbarWrapperElement.appendChild(node);\n        clipboardInstance = new ClipboardJS(node, {\n          text: () => preElement.innerText\n        });\n      }); // destroy clipboard instance when view is destroyed\n\n      embeddedViewRef.onDestroy(() => clipboardInstance.destroy());\n    }\n  }\n\n  renderMermaid(element, options = this.DEFAULT_MERMAID_OPTIONS) {\n    if (!isPlatformBrowser(this.platform)) {\n      return;\n    }\n\n    if (typeof mermaid === 'undefined' || typeof mermaid.init === 'undefined') {\n      throw new Error(errorMermaidNotLoaded);\n    }\n\n    const mermaidElements = element.querySelectorAll('.mermaid');\n\n    if (mermaidElements.length === 0) {\n      return;\n    }\n\n    mermaid.initialize(options);\n    mermaid.init(mermaidElements);\n  }\n\n  trimIndentation(markdown) {\n    if (!markdown) {\n      return '';\n    }\n\n    let indentStart;\n    return markdown.split('\\n').map(line => {\n      let lineIdentStart = indentStart;\n\n      if (line.length > 0) {\n        lineIdentStart = isNaN(lineIdentStart) ? line.search(/\\S|$/) : Math.min(line.search(/\\S|$/), lineIdentStart);\n      }\n\n      if (isNaN(indentStart)) {\n        indentStart = lineIdentStart;\n      }\n\n      return lineIdentStart ? line.substring(lineIdentStart) : line;\n    }).join('\\n');\n  }\n\n}\n\nMarkdownService.ɵfac = function MarkdownService_Factory(t) {\n  return new (t || MarkdownService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(SECURITY_CONTEXT), i0.ɵɵinject(i1$1.HttpClient, 8), i0.ɵɵinject(ClipboardOptions, 8), i0.ɵɵinject(MarkedOptions, 8), i0.ɵɵinject(i4.DomSanitizer));\n};\n\nMarkdownService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MarkdownService,\n  factory: MarkdownService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.SecurityContext,\n      decorators: [{\n        type: Inject,\n        args: [SECURITY_CONTEXT]\n      }]\n    }, {\n      type: i1$1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ClipboardOptions,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MarkedOptions,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.DomSanitizer\n    }];\n  }, null);\n})();\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\nclass MarkdownComponent {\n  constructor(element, markdownService, viewContainerRef) {\n    this.element = element;\n    this.markdownService = markdownService;\n    this.viewContainerRef = viewContainerRef; // Event emitters\n\n    this.error = new EventEmitter();\n    this.load = new EventEmitter();\n    this.ready = new EventEmitter();\n    this._commandLine = false;\n    this._clipboard = false;\n    this._emoji = false;\n    this._inline = false;\n    this._katex = false;\n    this._lineHighlight = false;\n    this._lineNumbers = false;\n    this._mermaid = false;\n    this.destroyed$ = new Subject();\n  }\n\n  get inline() {\n    return this._inline;\n  }\n\n  set inline(value) {\n    this._inline = this.coerceBooleanProperty(value);\n  } // Plugin - clipboard\n\n\n  get clipboard() {\n    return this._clipboard;\n  }\n\n  set clipboard(value) {\n    this._clipboard = this.coerceBooleanProperty(value);\n  } // Plugin - emoji\n\n\n  get emoji() {\n    return this._emoji;\n  }\n\n  set emoji(value) {\n    this._emoji = this.coerceBooleanProperty(value);\n  } // Plugin - katex\n\n\n  get katex() {\n    return this._katex;\n  }\n\n  set katex(value) {\n    this._katex = this.coerceBooleanProperty(value);\n  } // Plugin - mermaid\n\n\n  get mermaid() {\n    return this._mermaid;\n  }\n\n  set mermaid(value) {\n    this._mermaid = this.coerceBooleanProperty(value);\n  } // Plugin - lineHighlight\n\n\n  get lineHighlight() {\n    return this._lineHighlight;\n  }\n\n  set lineHighlight(value) {\n    this._lineHighlight = this.coerceBooleanProperty(value);\n  } // Plugin - lineNumbers\n\n\n  get lineNumbers() {\n    return this._lineNumbers;\n  }\n\n  set lineNumbers(value) {\n    this._lineNumbers = this.coerceBooleanProperty(value);\n  } // Plugin - commandLine\n\n\n  get commandLine() {\n    return this._commandLine;\n  }\n\n  set commandLine(value) {\n    this._commandLine = this.coerceBooleanProperty(value);\n  }\n\n  ngOnChanges() {\n    this.loadContent();\n  }\n\n  loadContent() {\n    if (this.data != null) {\n      this.handleData();\n      return;\n    }\n\n    if (this.src != null) {\n      this.handleSrc();\n      return;\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this.data && !this.src) {\n      this.handleTransclusion();\n    }\n\n    this.markdownService.reload$.pipe(takeUntil(this.destroyed$)).subscribe(() => this.loadContent());\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  render(markdown, decodeHtml = false) {\n    const parsedOptions = {\n      decodeHtml,\n      inline: this.inline,\n      emoji: this.emoji,\n      mermaid: this.mermaid\n    };\n    const renderOptions = {\n      clipboard: this.clipboard,\n      clipboardOptions: {\n        buttonComponent: this.clipboardButtonComponent,\n        buttonTemplate: this.clipboardButtonTemplate\n      },\n      katex: this.katex,\n      katexOptions: this.katexOptions,\n      mermaid: this.mermaid,\n      mermaidOptions: this.mermaidOptions\n    };\n    const parsed = this.markdownService.parse(markdown, parsedOptions);\n    this.element.nativeElement.innerHTML = parsed;\n    this.handlePlugins();\n    this.markdownService.render(this.element.nativeElement, renderOptions, this.viewContainerRef);\n    this.ready.emit();\n  }\n\n  coerceBooleanProperty(value) {\n    return value != null && `${String(value)}` !== 'false';\n  }\n\n  handleData() {\n    this.render(this.data);\n  }\n\n  handleSrc() {\n    this.markdownService.getSource(this.src).subscribe({\n      next: markdown => {\n        this.render(markdown);\n        this.load.emit(markdown);\n      },\n      error: error => this.error.emit(error)\n    });\n  }\n\n  handleTransclusion() {\n    this.render(this.element.nativeElement.innerHTML, true);\n  }\n\n  handlePlugins() {\n    if (this.commandLine) {\n      this.setPluginClass(this.element.nativeElement, PrismPlugin.CommandLine);\n      this.setPluginOptions(this.element.nativeElement, {\n        dataFilterOutput: this.filterOutput,\n        dataHost: this.host,\n        dataPrompt: this.prompt,\n        dataOutput: this.output,\n        dataUser: this.user\n      });\n    }\n\n    if (this.lineHighlight) {\n      this.setPluginOptions(this.element.nativeElement, {\n        dataLine: this.line,\n        dataLineOffset: this.lineOffset\n      });\n    }\n\n    if (this.lineNumbers) {\n      this.setPluginClass(this.element.nativeElement, PrismPlugin.LineNumbers);\n      this.setPluginOptions(this.element.nativeElement, {\n        dataStart: this.start\n      });\n    }\n  }\n\n  setPluginClass(element, plugin) {\n    const preElements = element.querySelectorAll('pre');\n\n    for (let i = 0; i < preElements.length; i++) {\n      const classes = plugin instanceof Array ? plugin : [plugin];\n      preElements.item(i).classList.add(...classes);\n    }\n  }\n\n  setPluginOptions(element, options) {\n    const preElements = element.querySelectorAll('pre');\n\n    for (let i = 0; i < preElements.length; i++) {\n      Object.keys(options).forEach(option => {\n        const attributeValue = options[option];\n\n        if (attributeValue) {\n          const attributeName = this.toLispCase(option);\n          preElements.item(i).setAttribute(attributeName, attributeValue.toString());\n        }\n      });\n    }\n  }\n\n  toLispCase(value) {\n    const upperChars = value.match(/([A-Z])/g);\n\n    if (!upperChars) {\n      return value;\n    }\n\n    let str = value.toString();\n\n    for (let i = 0, n = upperChars.length; i < n; i++) {\n      str = str.replace(new RegExp(upperChars[i]), '-' + upperChars[i].toLowerCase());\n    }\n\n    if (str.slice(0, 1) === '-') {\n      str = str.slice(1);\n    }\n\n    return str;\n  }\n\n}\n\nMarkdownComponent.ɵfac = function MarkdownComponent_Factory(t) {\n  return new (t || MarkdownComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MarkdownService), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n};\n\nMarkdownComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MarkdownComponent,\n  selectors: [[\"markdown\"], [\"\", \"markdown\", \"\"]],\n  inputs: {\n    data: \"data\",\n    src: \"src\",\n    inline: \"inline\",\n    clipboard: \"clipboard\",\n    clipboardButtonComponent: \"clipboardButtonComponent\",\n    clipboardButtonTemplate: \"clipboardButtonTemplate\",\n    emoji: \"emoji\",\n    katex: \"katex\",\n    katexOptions: \"katexOptions\",\n    mermaid: \"mermaid\",\n    mermaidOptions: \"mermaidOptions\",\n    lineHighlight: \"lineHighlight\",\n    line: \"line\",\n    lineOffset: \"lineOffset\",\n    lineNumbers: \"lineNumbers\",\n    start: \"start\",\n    commandLine: \"commandLine\",\n    filterOutput: \"filterOutput\",\n    host: \"host\",\n    prompt: \"prompt\",\n    output: \"output\",\n    user: \"user\"\n  },\n  outputs: {\n    error: \"error\",\n    load: \"load\",\n    ready: \"ready\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MarkdownComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownComponent, [{\n    type: Component,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/component-selector\n      selector: 'markdown, [markdown]',\n      template: '<ng-content></ng-content>'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: MarkdownService\n    }, {\n      type: i0.ViewContainerRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    src: [{\n      type: Input\n    }],\n    inline: [{\n      type: Input\n    }],\n    clipboard: [{\n      type: Input\n    }],\n    clipboardButtonComponent: [{\n      type: Input\n    }],\n    clipboardButtonTemplate: [{\n      type: Input\n    }],\n    emoji: [{\n      type: Input\n    }],\n    katex: [{\n      type: Input\n    }],\n    katexOptions: [{\n      type: Input\n    }],\n    mermaid: [{\n      type: Input\n    }],\n    mermaidOptions: [{\n      type: Input\n    }],\n    lineHighlight: [{\n      type: Input\n    }],\n    line: [{\n      type: Input\n    }],\n    lineOffset: [{\n      type: Input\n    }],\n    lineNumbers: [{\n      type: Input\n    }],\n    start: [{\n      type: Input\n    }],\n    commandLine: [{\n      type: Input\n    }],\n    filterOutput: [{\n      type: Input\n    }],\n    host: [{\n      type: Input\n    }],\n    prompt: [{\n      type: Input\n    }],\n    output: [{\n      type: Input\n    }],\n    user: [{\n      type: Input\n    }],\n    error: [{\n      type: Output\n    }],\n    load: [{\n      type: Output\n    }],\n    ready: [{\n      type: Output\n    }]\n  });\n})();\n\nclass MarkdownPipe {\n  constructor(domSanitizer, elementRef, markdownService, viewContainerRef, zone) {\n    this.domSanitizer = domSanitizer;\n    this.elementRef = elementRef;\n    this.markdownService = markdownService;\n    this.viewContainerRef = viewContainerRef;\n    this.zone = zone;\n  }\n\n  transform(value, options) {\n    if (value == null) {\n      return '';\n    }\n\n    if (typeof value !== 'string') {\n      console.error(`MarkdownPipe has been invoked with an invalid value type [${typeof value}]`);\n      return value;\n    }\n\n    const markdown = this.markdownService.parse(value, options);\n    this.zone.onStable.pipe(first()).subscribe(() => this.markdownService.render(this.elementRef.nativeElement, options, this.viewContainerRef));\n    return this.domSanitizer.bypassSecurityTrustHtml(markdown);\n  }\n\n}\n\nMarkdownPipe.ɵfac = function MarkdownPipe_Factory(t) {\n  return new (t || MarkdownPipe)(i0.ɵɵdirectiveInject(i4.DomSanitizer, 16), i0.ɵɵdirectiveInject(i0.ElementRef, 16), i0.ɵɵdirectiveInject(MarkdownService, 16), i0.ɵɵdirectiveInject(i0.ViewContainerRef, 16), i0.ɵɵdirectiveInject(i0.NgZone, 16));\n};\n\nMarkdownPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"markdown\",\n  type: MarkdownPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'markdown'\n    }]\n  }], function () {\n    return [{\n      type: i4.DomSanitizer\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MarkdownService\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nconst sharedDeclarations = [ClipboardButtonComponent, LanguagePipe, MarkdownComponent, MarkdownPipe];\nconst sharedEntryComponents = [ClipboardButtonComponent];\n\nclass MarkdownModule {\n  static forRoot(markdownModuleConfig) {\n    return {\n      ngModule: MarkdownModule,\n      providers: [MarkdownService, markdownModuleConfig && markdownModuleConfig.loader || [], markdownModuleConfig && markdownModuleConfig.clipboardOptions || [], markdownModuleConfig && markdownModuleConfig.markedOptions || [], {\n        provide: SECURITY_CONTEXT,\n        useValue: markdownModuleConfig && markdownModuleConfig.sanitize != null ? markdownModuleConfig.sanitize : SecurityContext.HTML\n      }]\n    };\n  }\n\n  static forChild() {\n    return {\n      ngModule: MarkdownModule\n    };\n  }\n\n}\n\nMarkdownModule.ɵfac = function MarkdownModule_Factory(t) {\n  return new (t || MarkdownModule)();\n};\n\nMarkdownModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MarkdownModule\n});\nMarkdownModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MarkdownModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: sharedDeclarations,\n      declarations: sharedDeclarations,\n      entryComponents: sharedEntryComponents\n    }]\n  }], null, null);\n})();\n/* eslint-disable */\n\n\nvar MermaidAPI;\n\n(function (MermaidAPI) {\n  let SecurityLevel;\n\n  (function (SecurityLevel) {\n    /**\r\n     * (default) tags in text are encoded, click functionality is disabled\r\n     */\n    SecurityLevel[\"Strict\"] = \"strict\";\n    /**\r\n     * tags in text are allowed, click functionality is enabled\r\n     */\n\n    SecurityLevel[\"Loose\"] = \"loose\";\n    /**\r\n     * html tags in text are allowed, (only script element is removed), click functionality is enabled\r\n     */\n\n    SecurityLevel[\"Antiscript\"] = \"antiscript\";\n    /**\r\n     * with this security level all rendering takes place in a sandboxed iframe.\r\n     * This prevent any javascript running in the context.\r\n     * This may hinder interactive functionality of the diagram like scripts,\r\n     * popups in sequence diagram or links to other tabs/targets etc.\r\n     */\n\n    SecurityLevel[\"Sandbox\"] = \"sandbox\";\n  })(SecurityLevel = MermaidAPI.SecurityLevel || (MermaidAPI.SecurityLevel = {}));\n\n  let Theme;\n\n  (function (Theme) {\n    /**\r\n     * Designed to modified, as the name implies it is supposed to be used as the base for making custom themes.\r\n     */\n    Theme[\"Base\"] = \"base\";\n    /**\r\n     * A theme full of light greens that is easy on the eyes.\r\n     */\n\n    Theme[\"Forest\"] = \"forest\";\n    /**\r\n     * A theme that would go well with other dark colored elements.\r\n     */\n\n    Theme[\"Dark\"] = \"dark\";\n    /**\r\n     *  The default theme for all diagrams.\r\n     */\n\n    Theme[\"Default\"] = \"default\";\n    /**\r\n     * The theme to be used for black and white printing\r\n     */\n\n    Theme[\"Neutral\"] = \"neutral\";\n  })(Theme = MermaidAPI.Theme || (MermaidAPI.Theme = {}));\n\n  let LogLevel;\n\n  (function (LogLevel) {\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n    LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n  })(LogLevel = MermaidAPI.LogLevel || (MermaidAPI.LogLevel = {}));\n})(MermaidAPI || (MermaidAPI = {}));\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ClipboardButtonComponent, ClipboardOptions, ClipboardRenderOptions, ExtendedRenderer, KatexSpecificOptions, LanguagePipe, MarkdownComponent, MarkdownModule, MarkdownPipe, MarkdownService, MarkedOptions, MermaidAPI, PrismPlugin, SECURITY_CONTEXT, errorClipboardNotLoaded, errorClipboardViewContainerRequired, errorJoyPixelsNotLoaded, errorKatexNotLoaded, errorMermaidNotLoaded, errorSrcWithoutHttpClient };","map":{"version":3,"names":["i0","Component","ChangeDetectionStrategy","Pipe","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","EventEmitter","Input","Output","SecurityContext","NgModule","Subject","merge","of","timer","switchMap","mapTo","distinctUntilChanged","shareReplay","startWith","map","takeUntil","first","i1","isPlatformBrowser","CommonModule","Renderer","marked","MarkedRenderer","i1$1","i4","BUTTON_TEXT_COPY","BUTTON_TEXT_COPIED","ClipboardButtonComponent","constructor","_buttonClick$","copied$","pipe","copiedText$","copied","onCopyToClipboardClick","next","ɵfac","ɵcmp","AsyncPipe","type","args","selector","template","changeDetection","OnPush","ClipboardOptions","ClipboardRenderOptions","KatexSpecificOptions","LanguagePipe","transform","value","language","console","error","ɵpipe","name","PrismPlugin","MarkedOptions","errorJoyPixelsNotLoaded","errorKatexNotLoaded","errorMermaidNotLoaded","errorClipboardNotLoaded","errorClipboardViewContainerRequired","errorSrcWithoutHttpClient","SECURITY_CONTEXT","ExtendedRenderer","arguments","ɵNgxMarkdownRendererExtended","MarkdownService","platform","securityContext","http","clipboardOptions","options","sanitizer","DEFAULT_PARSE_OPTIONS","decodeHtml","inline","emoji","mermaid","markedOptions","undefined","DEFAULT_RENDER_OPTIONS","clipboard","katex","katexOptions","mermaidOptions","DEFAULT_MARKED_OPTIONS","renderer","DEFAULT_KATEX_OPTIONS","delimiters","left","right","display","DEFAULT_MERMAID_OPTIONS","startOnLoad","DEFAULT_CLIPBOARD_OPTIONS","buttonComponent","_reload$","reload$","asObservable","_options","parse","markdown","extendRenderer","trimmed","trimIndentation","decoded","emojified","parseEmoji","parseMarked","sanitize","render","element","viewContainerRef","renderClipboard","renderKatex","renderMermaid","highlight","reload","getSource","src","Error","get","responseType","handleExtension","Prism","highlightAllUnder","document","noLanguageElements","querySelectorAll","Array","prototype","forEach","call","x","classList","add","html","textarea","createElement","innerHTML","extendedRenderer","defaultCode","code","isEscaped","urlProtocolIndex","lastIndexOf","urlWithoutProtocol","substring","lastSlashIndex","lastUrlSegment","split","lastDotIndex","extension","parseInline","joypixels","shortnameToUnicode","renderMathInElement","ClipboardJS","buttonTemplate","preElements","i","length","preElement","item","preWrapperElement","style","position","parentNode","insertBefore","appendChild","toolbarWrapperElement","top","opacity","transition","insertAdjacentElement","onmouseover","onmouseout","embeddedViewRef","componentRef","createComponent","hostView","createEmbeddedView","clipboardInstance","rootNodes","node","text","innerText","onDestroy","destroy","init","mermaidElements","initialize","indentStart","line","lineIdentStart","isNaN","search","Math","min","join","HttpClient","DomSanitizer","ɵprov","Object","decorators","MarkdownComponent","markdownService","load","ready","_commandLine","_clipboard","_emoji","_inline","_katex","_lineHighlight","_lineNumbers","_mermaid","destroyed$","coerceBooleanProperty","lineHighlight","lineNumbers","commandLine","ngOnChanges","loadContent","data","handleData","handleSrc","ngAfterViewInit","handleTransclusion","subscribe","ngOnDestroy","complete","parsedOptions","renderOptions","clipboardButtonComponent","clipboardButtonTemplate","parsed","nativeElement","handlePlugins","emit","String","setPluginClass","CommandLine","setPluginOptions","dataFilterOutput","filterOutput","dataHost","host","dataPrompt","prompt","dataOutput","output","dataUser","user","dataLine","dataLineOffset","lineOffset","LineNumbers","dataStart","start","plugin","classes","keys","option","attributeValue","attributeName","toLispCase","setAttribute","toString","upperChars","match","str","n","replace","RegExp","toLowerCase","slice","ElementRef","ViewContainerRef","MarkdownPipe","domSanitizer","elementRef","zone","onStable","bypassSecurityTrustHtml","NgZone","sharedDeclarations","sharedEntryComponents","MarkdownModule","forRoot","markdownModuleConfig","ngModule","providers","loader","provide","useValue","HTML","forChild","ɵmod","ɵinj","imports","exports","declarations","entryComponents","MermaidAPI","SecurityLevel","Theme","LogLevel"],"sources":["/home/payal/Desktop/automations/node_modules/ngx-markdown/fesm2020/ngx-markdown.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Pipe, InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Input, Output, SecurityContext, NgModule } from '@angular/core';\nimport { Subject, merge, of, timer } from 'rxjs';\nimport { switchMap, mapTo, distinctUntilChanged, shareReplay, startWith, map, takeUntil, first } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { Renderer, marked } from 'marked';\nexport { Renderer as MarkedRenderer } from 'marked';\nimport * as i1$1 from '@angular/common/http';\nimport * as i4 from '@angular/platform-browser';\n\nconst BUTTON_TEXT_COPY = 'Copy';\r\nconst BUTTON_TEXT_COPIED = 'Copied';\r\nclass ClipboardButtonComponent {\r\n    constructor() {\r\n        this._buttonClick$ = new Subject();\r\n        this.copied$ = this._buttonClick$.pipe(switchMap(() => merge(of(true), timer(3000).pipe(mapTo(false)))), distinctUntilChanged(), shareReplay(1));\r\n        this.copiedText$ = this.copied$.pipe(startWith(false), map(copied => copied\r\n            ? BUTTON_TEXT_COPIED\r\n            : BUTTON_TEXT_COPY));\r\n    }\r\n    onCopyToClipboardClick() {\r\n        this._buttonClick$.next();\r\n    }\r\n}\r\nClipboardButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ClipboardButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nClipboardButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: ClipboardButtonComponent, selector: \"markdown-clipboard\", ngImport: i0, template: `\r\n    <button\r\n      class=\"markdown-clipboard-button\"\r\n      [class.copied]=\"copied$ | async\"\r\n      (click)=\"onCopyToClipboardClick()\"\r\n    >{{ copiedText$ | async }}</button>\r\n  `, isInline: true, dependencies: [{ kind: \"pipe\", type: i1.AsyncPipe, name: \"async\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: ClipboardButtonComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'markdown-clipboard',\r\n                    template: `\r\n    <button\r\n      class=\"markdown-clipboard-button\"\r\n      [class.copied]=\"copied$ | async\"\r\n      (click)=\"onCopyToClipboardClick()\"\r\n    >{{ copiedText$ | async }}</button>\r\n  `,\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                }]\r\n        }] });\n\nclass ClipboardOptions {\r\n}\r\nclass ClipboardRenderOptions extends ClipboardOptions {\r\n}\n\n/* eslint-disable */\r\nclass KatexSpecificOptions {\r\n}\n\nclass LanguagePipe {\r\n    transform(value, language) {\r\n        if (value == null) {\r\n            value = '';\r\n        }\r\n        if (language == null) {\r\n            language = '';\r\n        }\r\n        if (typeof value !== 'string') {\r\n            console.error(`LanguagePipe has been invoked with an invalid value type [${typeof value}]`);\r\n            return value;\r\n        }\r\n        if (typeof language !== 'string') {\r\n            console.error(`LanguagePipe has been invoked with an invalid parameter [${typeof language}]`);\r\n            return value;\r\n        }\r\n        return '```' + language + '\\n' + value + '\\n```';\r\n    }\r\n}\r\nLanguagePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: LanguagePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\nLanguagePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: LanguagePipe, name: \"language\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: LanguagePipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'language',\r\n                }]\r\n        }] });\n\nvar PrismPlugin;\r\n(function (PrismPlugin) {\r\n    PrismPlugin[\"CommandLine\"] = \"command-line\";\r\n    PrismPlugin[\"LineHighlight\"] = \"line-highlight\";\r\n    PrismPlugin[\"LineNumbers\"] = \"line-numbers\";\r\n})(PrismPlugin || (PrismPlugin = {}));\n\nclass MarkedOptions {\r\n}\n\n/* eslint-disable max-len */\r\nconst errorJoyPixelsNotLoaded = '[ngx-markdown] When using the `emoji` attribute you *have to* include Emoji-Toolkit files to `angular.json` or use imports. See README for more information';\r\nconst errorKatexNotLoaded = '[ngx-markdown] When using the `katex` attribute you *have to* include KaTeX files to `angular.json` or use imports. See README for more information';\r\nconst errorMermaidNotLoaded = '[ngx-markdown] When using the `mermaid` attribute you *have to* include Mermaid files to `angular.json` or use imports. See README for more information';\r\nconst errorClipboardNotLoaded = '[ngx-markdown] When using the `clipboard` attribute you *have to* include Clipboard files to `angular.json` or use imports. See README for more information';\r\nconst errorClipboardViewContainerRequired = '[ngx-markdown] When using the `clipboard` attribute you *have to* provide the `viewContainerRef` parameter to `MarkdownService.render()` function';\r\nconst errorSrcWithoutHttpClient = '[ngx-markdown] When using the `src` attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';\r\n/* eslint-enable max-len */\r\nconst SECURITY_CONTEXT = new InjectionToken('SECURITY_CONTEXT');\r\nclass ExtendedRenderer extends Renderer {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.ɵNgxMarkdownRendererExtended = false;\r\n    }\r\n}\r\nclass MarkdownService {\r\n    constructor(platform, securityContext, http, clipboardOptions, options, sanitizer) {\r\n        this.platform = platform;\r\n        this.securityContext = securityContext;\r\n        this.http = http;\r\n        this.clipboardOptions = clipboardOptions;\r\n        this.sanitizer = sanitizer;\r\n        this.DEFAULT_PARSE_OPTIONS = {\r\n            decodeHtml: false,\r\n            inline: false,\r\n            emoji: false,\r\n            mermaid: false,\r\n            markedOptions: undefined,\r\n        };\r\n        this.DEFAULT_RENDER_OPTIONS = {\r\n            clipboard: false,\r\n            clipboardOptions: undefined,\r\n            katex: false,\r\n            katexOptions: undefined,\r\n            mermaid: false,\r\n            mermaidOptions: undefined,\r\n        };\r\n        this.DEFAULT_MARKED_OPTIONS = {\r\n            renderer: new Renderer(),\r\n        };\r\n        this.DEFAULT_KATEX_OPTIONS = {\r\n            delimiters: [\r\n                { left: \"$$\", right: \"$$\", display: true },\r\n                { left: \"$\", right: \"$\", display: false },\r\n                { left: \"\\\\(\", right: \"\\\\)\", display: false },\r\n                { left: \"\\\\begin{equation}\", right: \"\\\\end{equation}\", display: true },\r\n                { left: \"\\\\begin{align}\", right: \"\\\\end{align}\", display: true },\r\n                { left: \"\\\\begin{alignat}\", right: \"\\\\end{alignat}\", display: true },\r\n                { left: \"\\\\begin{gather}\", right: \"\\\\end{gather}\", display: true },\r\n                { left: \"\\\\begin{CD}\", right: \"\\\\end{CD}\", display: true },\r\n                { left: \"\\\\[\", right: \"\\\\]\", display: true },\r\n            ],\r\n        };\r\n        this.DEFAULT_MERMAID_OPTIONS = {\r\n            startOnLoad: false,\r\n        };\r\n        this.DEFAULT_CLIPBOARD_OPTIONS = {\r\n            buttonComponent: undefined,\r\n        };\r\n        this._reload$ = new Subject();\r\n        this.reload$ = this._reload$.asObservable();\r\n        this.options = options;\r\n    }\r\n    get options() { return this._options; }\r\n    set options(value) {\r\n        this._options = { ...this.DEFAULT_MARKED_OPTIONS, ...value };\r\n    }\r\n    get renderer() { return this.options.renderer; }\r\n    set renderer(value) {\r\n        this.options.renderer = value;\r\n    }\r\n    parse(markdown, options = this.DEFAULT_PARSE_OPTIONS) {\r\n        const { decodeHtml, inline, emoji, mermaid, markedOptions = this.options, } = options;\r\n        if (mermaid) {\r\n            this.renderer = this.extendRenderer(markedOptions.renderer || new Renderer());\r\n        }\r\n        const trimmed = this.trimIndentation(markdown);\r\n        const decoded = decodeHtml ? this.decodeHtml(trimmed) : trimmed;\r\n        const emojified = emoji ? this.parseEmoji(decoded) : decoded;\r\n        const marked = this.parseMarked(emojified, markedOptions, inline);\r\n        return this.sanitizer.sanitize(this.securityContext, marked) || '';\r\n    }\r\n    render(element, options = this.DEFAULT_RENDER_OPTIONS, viewContainerRef) {\r\n        const { clipboard, clipboardOptions, katex, katexOptions, mermaid, mermaidOptions, } = options;\r\n        if (clipboard) {\r\n            this.renderClipboard(element, viewContainerRef, {\r\n                ...this.DEFAULT_CLIPBOARD_OPTIONS,\r\n                ...this.clipboardOptions,\r\n                ...clipboardOptions,\r\n            });\r\n        }\r\n        if (katex) {\r\n            this.renderKatex(element, {\r\n                ...this.DEFAULT_KATEX_OPTIONS,\r\n                ...katexOptions,\r\n            });\r\n        }\r\n        if (mermaid) {\r\n            this.renderMermaid(element, {\r\n                ...this.DEFAULT_MERMAID_OPTIONS,\r\n                ...mermaidOptions,\r\n            });\r\n        }\r\n        this.highlight(element);\r\n    }\r\n    reload() {\r\n        this._reload$.next();\r\n    }\r\n    getSource(src) {\r\n        if (!this.http) {\r\n            throw new Error(errorSrcWithoutHttpClient);\r\n        }\r\n        return this.http\r\n            .get(src, { responseType: 'text' })\r\n            .pipe(map(markdown => this.handleExtension(src, markdown)));\r\n    }\r\n    highlight(element) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return;\r\n        }\r\n        if (typeof Prism === 'undefined' || typeof Prism.highlightAllUnder === 'undefined') {\r\n            return;\r\n        }\r\n        if (!element) {\r\n            element = document;\r\n        }\r\n        const noLanguageElements = element.querySelectorAll('pre code:not([class*=\"language-\"])');\r\n        Array.prototype.forEach.call(noLanguageElements, (x) => x.classList.add('language-none'));\r\n        Prism.highlightAllUnder(element);\r\n    }\r\n    decodeHtml(html) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return html;\r\n        }\r\n        const textarea = document.createElement('textarea');\r\n        textarea.innerHTML = html;\r\n        return textarea.value;\r\n    }\r\n    extendRenderer(renderer) {\r\n        const extendedRenderer = renderer;\r\n        if (extendedRenderer.ɵNgxMarkdownRendererExtended === true) {\r\n            return renderer;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/unbound-method\r\n        const defaultCode = renderer.code;\r\n        renderer.code = function (code, language, isEscaped) {\r\n            return language === 'mermaid'\r\n                ? `<div class=\"mermaid\">${code}</div>`\r\n                : defaultCode.call(this, code, language, isEscaped);\r\n        };\r\n        extendedRenderer.ɵNgxMarkdownRendererExtended = true;\r\n        return renderer;\r\n    }\r\n    handleExtension(src, markdown) {\r\n        const urlProtocolIndex = src.lastIndexOf('://');\r\n        const urlWithoutProtocol = urlProtocolIndex > -1\r\n            ? src.substring(urlProtocolIndex + 4)\r\n            : src;\r\n        const lastSlashIndex = urlWithoutProtocol.lastIndexOf('/');\r\n        const lastUrlSegment = lastSlashIndex > -1\r\n            ? urlWithoutProtocol.substring(lastSlashIndex + 1).split('?')[0]\r\n            : '';\r\n        const lastDotIndex = lastUrlSegment.lastIndexOf('.');\r\n        const extension = lastDotIndex > -1\r\n            ? lastUrlSegment.substring(lastDotIndex + 1)\r\n            : '';\r\n        return !!extension && extension !== 'md'\r\n            ? '```' + extension + '\\n' + markdown + '\\n```'\r\n            : markdown;\r\n    }\r\n    parseMarked(html, markedOptions, inline = false) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return html;\r\n        }\r\n        if (inline) {\r\n            return marked.parseInline(html, markedOptions);\r\n        }\r\n        return marked.parse(html, markedOptions);\r\n    }\r\n    parseEmoji(html) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return html;\r\n        }\r\n        if (typeof joypixels === 'undefined' || typeof joypixels.shortnameToUnicode === 'undefined') {\r\n            throw new Error(errorJoyPixelsNotLoaded);\r\n        }\r\n        return joypixels.shortnameToUnicode(html);\r\n    }\r\n    renderKatex(element, options) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return;\r\n        }\r\n        if (typeof katex === 'undefined' || typeof renderMathInElement === 'undefined') {\r\n            throw new Error(errorKatexNotLoaded);\r\n        }\r\n        renderMathInElement(element, options);\r\n    }\r\n    renderClipboard(element, viewContainerRef, options) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return;\r\n        }\r\n        if (typeof ClipboardJS === 'undefined') {\r\n            throw new Error(errorClipboardNotLoaded);\r\n        }\r\n        if (!viewContainerRef) {\r\n            throw new Error(errorClipboardViewContainerRequired);\r\n        }\r\n        const { buttonComponent, buttonTemplate, } = options;\r\n        // target every <pre> elements\r\n        const preElements = element.querySelectorAll('pre');\r\n        for (let i = 0; i < preElements.length; i++) {\r\n            const preElement = preElements.item(i);\r\n            // create <pre> wrapper element\r\n            const preWrapperElement = document.createElement('div');\r\n            preWrapperElement.style.position = 'relative';\r\n            preElement.parentNode.insertBefore(preWrapperElement, preElement);\r\n            preWrapperElement.appendChild(preElement);\r\n            // create toolbar element\r\n            const toolbarWrapperElement = document.createElement('div');\r\n            toolbarWrapperElement.style.position = 'absolute';\r\n            toolbarWrapperElement.style.top = '.5em';\r\n            toolbarWrapperElement.style.right = '.5em';\r\n            toolbarWrapperElement.style.opacity = '0';\r\n            toolbarWrapperElement.style.transition = 'opacity 250ms ease-out';\r\n            preWrapperElement.insertAdjacentElement('beforeend', toolbarWrapperElement);\r\n            // register listener to show/hide toolbar\r\n            preElement.onmouseover = () => toolbarWrapperElement.style.opacity = '1';\r\n            preElement.onmouseout = () => toolbarWrapperElement.style.opacity = '0';\r\n            // declare embeddedViewRef holding variable\r\n            let embeddedViewRef;\r\n            // use provided component via input property\r\n            // or provided via ClipboardOptions provider\r\n            if (buttonComponent) {\r\n                const componentRef = viewContainerRef.createComponent(buttonComponent);\r\n                embeddedViewRef = componentRef.hostView;\r\n            }\r\n            // use provided template via input property\r\n            else if (buttonTemplate) {\r\n                embeddedViewRef = viewContainerRef.createEmbeddedView(buttonTemplate);\r\n            }\r\n            // use default component\r\n            else {\r\n                const componentRef = viewContainerRef.createComponent(ClipboardButtonComponent);\r\n                embeddedViewRef = componentRef.hostView;\r\n            }\r\n            // declare clipboard instance variable\r\n            let clipboardInstance;\r\n            // attach clipboard.js to root node\r\n            embeddedViewRef.rootNodes.forEach((node) => {\r\n                node.onmouseover = () => toolbarWrapperElement.style.opacity = '1';\r\n                toolbarWrapperElement.appendChild(node);\r\n                clipboardInstance = new ClipboardJS(node, { text: () => preElement.innerText });\r\n            });\r\n            // destroy clipboard instance when view is destroyed\r\n            embeddedViewRef.onDestroy(() => clipboardInstance.destroy());\r\n        }\r\n    }\r\n    renderMermaid(element, options = this.DEFAULT_MERMAID_OPTIONS) {\r\n        if (!isPlatformBrowser(this.platform)) {\r\n            return;\r\n        }\r\n        if (typeof mermaid === 'undefined' || typeof mermaid.init === 'undefined') {\r\n            throw new Error(errorMermaidNotLoaded);\r\n        }\r\n        const mermaidElements = element.querySelectorAll('.mermaid');\r\n        if (mermaidElements.length === 0) {\r\n            return;\r\n        }\r\n        mermaid.initialize(options);\r\n        mermaid.init(mermaidElements);\r\n    }\r\n    trimIndentation(markdown) {\r\n        if (!markdown) {\r\n            return '';\r\n        }\r\n        let indentStart;\r\n        return markdown\r\n            .split('\\n')\r\n            .map(line => {\r\n            let lineIdentStart = indentStart;\r\n            if (line.length > 0) {\r\n                lineIdentStart = isNaN(lineIdentStart)\r\n                    ? line.search(/\\S|$/)\r\n                    : Math.min(line.search(/\\S|$/), lineIdentStart);\r\n            }\r\n            if (isNaN(indentStart)) {\r\n                indentStart = lineIdentStart;\r\n            }\r\n            return lineIdentStart\r\n                ? line.substring(lineIdentStart)\r\n                : line;\r\n        }).join('\\n');\r\n    }\r\n}\r\nMarkdownService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownService, deps: [{ token: PLATFORM_ID }, { token: SECURITY_CONTEXT }, { token: i1$1.HttpClient, optional: true }, { token: ClipboardOptions, optional: true }, { token: MarkedOptions, optional: true }, { token: i4.DomSanitizer }], target: i0.ɵɵFactoryTarget.Injectable });\r\nMarkdownService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\r\n                    type: Inject,\r\n                    args: [PLATFORM_ID]\r\n                }] }, { type: i0.SecurityContext, decorators: [{\r\n                    type: Inject,\r\n                    args: [SECURITY_CONTEXT]\r\n                }] }, { type: i1$1.HttpClient, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: ClipboardOptions, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: MarkedOptions, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i4.DomSanitizer }]; } });\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nclass MarkdownComponent {\r\n    constructor(element, markdownService, viewContainerRef) {\r\n        this.element = element;\r\n        this.markdownService = markdownService;\r\n        this.viewContainerRef = viewContainerRef;\r\n        // Event emitters\r\n        this.error = new EventEmitter();\r\n        this.load = new EventEmitter();\r\n        this.ready = new EventEmitter();\r\n        this._commandLine = false;\r\n        this._clipboard = false;\r\n        this._emoji = false;\r\n        this._inline = false;\r\n        this._katex = false;\r\n        this._lineHighlight = false;\r\n        this._lineNumbers = false;\r\n        this._mermaid = false;\r\n        this.destroyed$ = new Subject();\r\n    }\r\n    get inline() { return this._inline; }\r\n    set inline(value) { this._inline = this.coerceBooleanProperty(value); }\r\n    // Plugin - clipboard\r\n    get clipboard() { return this._clipboard; }\r\n    set clipboard(value) { this._clipboard = this.coerceBooleanProperty(value); }\r\n    // Plugin - emoji\r\n    get emoji() { return this._emoji; }\r\n    set emoji(value) { this._emoji = this.coerceBooleanProperty(value); }\r\n    // Plugin - katex\r\n    get katex() { return this._katex; }\r\n    set katex(value) { this._katex = this.coerceBooleanProperty(value); }\r\n    // Plugin - mermaid\r\n    get mermaid() { return this._mermaid; }\r\n    set mermaid(value) { this._mermaid = this.coerceBooleanProperty(value); }\r\n    // Plugin - lineHighlight\r\n    get lineHighlight() { return this._lineHighlight; }\r\n    set lineHighlight(value) { this._lineHighlight = this.coerceBooleanProperty(value); }\r\n    // Plugin - lineNumbers\r\n    get lineNumbers() { return this._lineNumbers; }\r\n    set lineNumbers(value) { this._lineNumbers = this.coerceBooleanProperty(value); }\r\n    // Plugin - commandLine\r\n    get commandLine() { return this._commandLine; }\r\n    set commandLine(value) { this._commandLine = this.coerceBooleanProperty(value); }\r\n    ngOnChanges() {\r\n        this.loadContent();\r\n    }\r\n    loadContent() {\r\n        if (this.data != null) {\r\n            this.handleData();\r\n            return;\r\n        }\r\n        if (this.src != null) {\r\n            this.handleSrc();\r\n            return;\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.data && !this.src) {\r\n            this.handleTransclusion();\r\n        }\r\n        this.markdownService.reload$\r\n            .pipe(takeUntil(this.destroyed$))\r\n            .subscribe(() => this.loadContent());\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroyed$.next();\r\n        this.destroyed$.complete();\r\n    }\r\n    render(markdown, decodeHtml = false) {\r\n        const parsedOptions = {\r\n            decodeHtml,\r\n            inline: this.inline,\r\n            emoji: this.emoji,\r\n            mermaid: this.mermaid,\r\n        };\r\n        const renderOptions = {\r\n            clipboard: this.clipboard,\r\n            clipboardOptions: {\r\n                buttonComponent: this.clipboardButtonComponent,\r\n                buttonTemplate: this.clipboardButtonTemplate,\r\n            },\r\n            katex: this.katex,\r\n            katexOptions: this.katexOptions,\r\n            mermaid: this.mermaid,\r\n            mermaidOptions: this.mermaidOptions,\r\n        };\r\n        const parsed = this.markdownService.parse(markdown, parsedOptions);\r\n        this.element.nativeElement.innerHTML = parsed;\r\n        this.handlePlugins();\r\n        this.markdownService.render(this.element.nativeElement, renderOptions, this.viewContainerRef);\r\n        this.ready.emit();\r\n    }\r\n    coerceBooleanProperty(value) {\r\n        return value != null && `${String(value)}` !== 'false';\r\n    }\r\n    handleData() {\r\n        this.render(this.data);\r\n    }\r\n    handleSrc() {\r\n        this.markdownService\r\n            .getSource(this.src)\r\n            .subscribe({\r\n            next: markdown => {\r\n                this.render(markdown);\r\n                this.load.emit(markdown);\r\n            },\r\n            error: error => this.error.emit(error),\r\n        });\r\n    }\r\n    handleTransclusion() {\r\n        this.render(this.element.nativeElement.innerHTML, true);\r\n    }\r\n    handlePlugins() {\r\n        if (this.commandLine) {\r\n            this.setPluginClass(this.element.nativeElement, PrismPlugin.CommandLine);\r\n            this.setPluginOptions(this.element.nativeElement, {\r\n                dataFilterOutput: this.filterOutput,\r\n                dataHost: this.host,\r\n                dataPrompt: this.prompt,\r\n                dataOutput: this.output,\r\n                dataUser: this.user,\r\n            });\r\n        }\r\n        if (this.lineHighlight) {\r\n            this.setPluginOptions(this.element.nativeElement, { dataLine: this.line, dataLineOffset: this.lineOffset });\r\n        }\r\n        if (this.lineNumbers) {\r\n            this.setPluginClass(this.element.nativeElement, PrismPlugin.LineNumbers);\r\n            this.setPluginOptions(this.element.nativeElement, { dataStart: this.start });\r\n        }\r\n    }\r\n    setPluginClass(element, plugin) {\r\n        const preElements = element.querySelectorAll('pre');\r\n        for (let i = 0; i < preElements.length; i++) {\r\n            const classes = plugin instanceof Array ? plugin : [plugin];\r\n            preElements.item(i).classList.add(...classes);\r\n        }\r\n    }\r\n    setPluginOptions(element, options) {\r\n        const preElements = element.querySelectorAll('pre');\r\n        for (let i = 0; i < preElements.length; i++) {\r\n            Object.keys(options).forEach(option => {\r\n                const attributeValue = options[option];\r\n                if (attributeValue) {\r\n                    const attributeName = this.toLispCase(option);\r\n                    preElements.item(i).setAttribute(attributeName, attributeValue.toString());\r\n                }\r\n            });\r\n        }\r\n    }\r\n    toLispCase(value) {\r\n        const upperChars = value.match(/([A-Z])/g);\r\n        if (!upperChars) {\r\n            return value;\r\n        }\r\n        let str = value.toString();\r\n        for (let i = 0, n = upperChars.length; i < n; i++) {\r\n            str = str.replace(new RegExp(upperChars[i]), '-' + upperChars[i].toLowerCase());\r\n        }\r\n        if (str.slice(0, 1) === '-') {\r\n            str = str.slice(1);\r\n        }\r\n        return str;\r\n    }\r\n}\r\nMarkdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownComponent, deps: [{ token: i0.ElementRef }, { token: MarkdownService }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });\r\nMarkdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: MarkdownComponent, selector: \"markdown, [markdown]\", inputs: { data: \"data\", src: \"src\", inline: \"inline\", clipboard: \"clipboard\", clipboardButtonComponent: \"clipboardButtonComponent\", clipboardButtonTemplate: \"clipboardButtonTemplate\", emoji: \"emoji\", katex: \"katex\", katexOptions: \"katexOptions\", mermaid: \"mermaid\", mermaidOptions: \"mermaidOptions\", lineHighlight: \"lineHighlight\", line: \"line\", lineOffset: \"lineOffset\", lineNumbers: \"lineNumbers\", start: \"start\", commandLine: \"commandLine\", filterOutput: \"filterOutput\", host: \"host\", prompt: \"prompt\", output: \"output\", user: \"user\" }, outputs: { error: \"error\", load: \"load\", ready: \"ready\" }, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    // eslint-disable-next-line @angular-eslint/component-selector\r\n                    selector: 'markdown, [markdown]',\r\n                    template: '<ng-content></ng-content>',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MarkdownService }, { type: i0.ViewContainerRef }]; }, propDecorators: { data: [{\r\n                type: Input\r\n            }], src: [{\r\n                type: Input\r\n            }], inline: [{\r\n                type: Input\r\n            }], clipboard: [{\r\n                type: Input\r\n            }], clipboardButtonComponent: [{\r\n                type: Input\r\n            }], clipboardButtonTemplate: [{\r\n                type: Input\r\n            }], emoji: [{\r\n                type: Input\r\n            }], katex: [{\r\n                type: Input\r\n            }], katexOptions: [{\r\n                type: Input\r\n            }], mermaid: [{\r\n                type: Input\r\n            }], mermaidOptions: [{\r\n                type: Input\r\n            }], lineHighlight: [{\r\n                type: Input\r\n            }], line: [{\r\n                type: Input\r\n            }], lineOffset: [{\r\n                type: Input\r\n            }], lineNumbers: [{\r\n                type: Input\r\n            }], start: [{\r\n                type: Input\r\n            }], commandLine: [{\r\n                type: Input\r\n            }], filterOutput: [{\r\n                type: Input\r\n            }], host: [{\r\n                type: Input\r\n            }], prompt: [{\r\n                type: Input\r\n            }], output: [{\r\n                type: Input\r\n            }], user: [{\r\n                type: Input\r\n            }], error: [{\r\n                type: Output\r\n            }], load: [{\r\n                type: Output\r\n            }], ready: [{\r\n                type: Output\r\n            }] } });\n\nclass MarkdownPipe {\r\n    constructor(domSanitizer, elementRef, markdownService, viewContainerRef, zone) {\r\n        this.domSanitizer = domSanitizer;\r\n        this.elementRef = elementRef;\r\n        this.markdownService = markdownService;\r\n        this.viewContainerRef = viewContainerRef;\r\n        this.zone = zone;\r\n    }\r\n    transform(value, options) {\r\n        if (value == null) {\r\n            return '';\r\n        }\r\n        if (typeof value !== 'string') {\r\n            console.error(`MarkdownPipe has been invoked with an invalid value type [${typeof value}]`);\r\n            return value;\r\n        }\r\n        const markdown = this.markdownService.parse(value, options);\r\n        this.zone.onStable\r\n            .pipe(first())\r\n            .subscribe(() => this.markdownService.render(this.elementRef.nativeElement, options, this.viewContainerRef));\r\n        return this.domSanitizer.bypassSecurityTrustHtml(markdown);\r\n    }\r\n}\r\nMarkdownPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownPipe, deps: [{ token: i4.DomSanitizer }, { token: i0.ElementRef }, { token: MarkdownService }, { token: i0.ViewContainerRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Pipe });\r\nMarkdownPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownPipe, name: \"markdown\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'markdown',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i4.DomSanitizer }, { type: i0.ElementRef }, { type: MarkdownService }, { type: i0.ViewContainerRef }, { type: i0.NgZone }]; } });\n\nconst sharedDeclarations = [\r\n    ClipboardButtonComponent,\r\n    LanguagePipe,\r\n    MarkdownComponent,\r\n    MarkdownPipe,\r\n];\r\nconst sharedEntryComponents = [\r\n    ClipboardButtonComponent,\r\n];\r\nclass MarkdownModule {\r\n    static forRoot(markdownModuleConfig) {\r\n        return {\r\n            ngModule: MarkdownModule,\r\n            providers: [\r\n                MarkdownService,\r\n                markdownModuleConfig && markdownModuleConfig.loader || [],\r\n                markdownModuleConfig && markdownModuleConfig.clipboardOptions || [],\r\n                markdownModuleConfig && markdownModuleConfig.markedOptions || [],\r\n                {\r\n                    provide: SECURITY_CONTEXT,\r\n                    useValue: markdownModuleConfig && markdownModuleConfig.sanitize != null\r\n                        ? markdownModuleConfig.sanitize\r\n                        : SecurityContext.HTML,\r\n                },\r\n            ],\r\n        };\r\n    }\r\n    static forChild() {\r\n        return {\r\n            ngModule: MarkdownModule,\r\n        };\r\n    }\r\n}\r\nMarkdownModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMarkdownModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownModule, declarations: [ClipboardButtonComponent,\r\n        LanguagePipe,\r\n        MarkdownComponent,\r\n        MarkdownPipe], imports: [CommonModule], exports: [ClipboardButtonComponent,\r\n        LanguagePipe,\r\n        MarkdownComponent,\r\n        MarkdownPipe] });\r\nMarkdownModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownModule, imports: [CommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: MarkdownModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [CommonModule],\r\n                    exports: sharedDeclarations,\r\n                    declarations: sharedDeclarations,\r\n                    entryComponents: sharedEntryComponents,\r\n                }]\r\n        }] });\n\n/* eslint-disable */\r\nvar MermaidAPI;\r\n(function (MermaidAPI) {\r\n    let SecurityLevel;\r\n    (function (SecurityLevel) {\r\n        /**\r\n         * (default) tags in text are encoded, click functionality is disabled\r\n         */\r\n        SecurityLevel[\"Strict\"] = \"strict\";\r\n        /**\r\n         * tags in text are allowed, click functionality is enabled\r\n         */\r\n        SecurityLevel[\"Loose\"] = \"loose\";\r\n        /**\r\n         * html tags in text are allowed, (only script element is removed), click functionality is enabled\r\n         */\r\n        SecurityLevel[\"Antiscript\"] = \"antiscript\";\r\n        /**\r\n         * with this security level all rendering takes place in a sandboxed iframe.\r\n         * This prevent any javascript running in the context.\r\n         * This may hinder interactive functionality of the diagram like scripts,\r\n         * popups in sequence diagram or links to other tabs/targets etc.\r\n         */\r\n        SecurityLevel[\"Sandbox\"] = \"sandbox\";\r\n    })(SecurityLevel = MermaidAPI.SecurityLevel || (MermaidAPI.SecurityLevel = {}));\r\n    let Theme;\r\n    (function (Theme) {\r\n        /**\r\n         * Designed to modified, as the name implies it is supposed to be used as the base for making custom themes.\r\n         */\r\n        Theme[\"Base\"] = \"base\";\r\n        /**\r\n         * A theme full of light greens that is easy on the eyes.\r\n         */\r\n        Theme[\"Forest\"] = \"forest\";\r\n        /**\r\n         * A theme that would go well with other dark colored elements.\r\n         */\r\n        Theme[\"Dark\"] = \"dark\";\r\n        /**\r\n         *  The default theme for all diagrams.\r\n         */\r\n        Theme[\"Default\"] = \"default\";\r\n        /**\r\n         * The theme to be used for black and white printing\r\n         */\r\n        Theme[\"Neutral\"] = \"neutral\";\r\n    })(Theme = MermaidAPI.Theme || (MermaidAPI.Theme = {}));\r\n    let LogLevel;\r\n    (function (LogLevel) {\r\n        LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\r\n        LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\r\n        LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\r\n        LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\r\n        LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\r\n    })(LogLevel = MermaidAPI.LogLevel || (MermaidAPI.LogLevel = {}));\r\n})(MermaidAPI || (MermaidAPI = {}));\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ClipboardButtonComponent, ClipboardOptions, ClipboardRenderOptions, ExtendedRenderer, KatexSpecificOptions, LanguagePipe, MarkdownComponent, MarkdownModule, MarkdownPipe, MarkdownService, MarkedOptions, MermaidAPI, PrismPlugin, SECURITY_CONTEXT, errorClipboardNotLoaded, errorClipboardViewContainerRequired, errorJoyPixelsNotLoaded, errorKatexNotLoaded, errorMermaidNotLoaded, errorSrcWithoutHttpClient };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}